server:
  port: 0

spring:
  application:
    name: user-service
  h2:
    console:
      enable: true
      settings:
        web-allow-others: true
      path: /h2-console
  datasource:
    driver-class-name: org.h2.Driver
    url: jdbc:h2:tcp://localhost/~/H2/msa/testdb
    username: sa
    password:
  jpa:
    hibernate:
      ddl-auto: create
    properties:
      hibernate:
        show_sql: true
        format_sql: true
        use_sql_comments: true # JPQL을 보려할 때

eureka:
  instance:
    hostname: localhost
    prefer-ip-address: true
    instance-id: ${spring.cloud.client.hostname}:${spring.application.instance_id:${random.value}} # + 랜덤포트: auto-scaling, load-balancer
    # user-service를 실행할 때마다 자동으로 포트가 부여되고 사용자가 인식할 수 없는 상태에서 여러개의 인스턴스가 만들어지고
    # 각각의 인스턴스들은 유레카 서비스(디스커버리 서비스)에 등록이 되고 라우팅 서비스/게이트웨이 서비스에 의해 호출될 수 있는 상태가 만들어진다.
  client:
    register-with-eureka: true
    fetch-registry: true
    service-url:
      defaultZone: http://127.0.0.1:8761/eureka

greeting:
  message: Welcome to the Simple E-commerce.

logging:
  level:
    com.example.userservice: DEBUG

# Spring Cloud Config Server에 저장
#token:
#  expiration_time: 86400000 # 하루 밀리세컨드: 24 * 60 * 60 * 1000
#  secret: user_token

# Actuator
management:
  endpoints:
    web:
      exposure:
        include: refresh, health, beans
# refresh: 현재 마이크로서비스에 있는 Config Server에서의 정보를 refresh
# beans: 현재 마이크로서비스에 등록된 빈의 정보 확인